#!/usr/bin/env python3
import streamlit as st
import PyPDF2
import re

def extract_pdf_text(uploaded_file):
    """Extraer texto del PDF"""
    text = ""
    try:
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        st.error(f"Error leyendo PDF: {e}")
        return ""

def analyze_translations(text):
    """Analizar qu√© secciones est√°n en ingl√©s vs espa√±ol"""
    results = {
        'sections_found': [],
        'sections_missing': [],
        'english_texts': set(),
        'spanish_texts': set(),
        'translation_quality': 'Buena'  # Por defecto asumimos buena calidad
    }
    
    # Secciones a buscar
    sections = [
        "SYNAPSE DATA ANALYSIS REPORT", "EXECUTIVE SUMMARY", "TABLE OF CONTENTS",
        "FILE INFORMATION", "MISSING VALUES", "FINAL DATA TABLE", "DESCRIPTIVE STATISTICS",
        "CORRELATION ANALYSIS", "CATEGORICAL FREQUENCIES", "CUSTOM CHART",
        "DATA QUALITY INSIGHTS", "CLEANING NOTES", "OBSERVATIONS AND RECOMMENDATIONS"
    ]
    
    # Patrones en ingl√©s
    english_patterns = [
        r"Data Quality Score", r"Total missing values", r"Column.*Mean.*Median.*Std Dev",
        r"Value.*Frequency", r"Examples of rows with incomplete data", r"Row \d+: Missing",
        r"Available data", r"Applied strategy", r"Removed rows with missing values",
        r"Filled missing values with", r"High variability detected", r"Potential outliers detected",
        r"Data shows skewness", r"High cardinality", r"Imbalanced categories",
        r"Small sample size", r"Missing values detected", r"Mixed data types detected",
        r"Duplicate values detected", r"Critical.*Warning.*Information",
        r"Bar Chart", r"Line Chart", r"Scatter Plot", r"Unsupported chart type"
    ]
    
    # Patrones en espa√±ol
    spanish_patterns = [
        r"REPORTE DE AN√ÅLISIS DE DATOS SYNAPSE", r"RESUMEN EJECUTIVO",
        r"INFORMACI√ìN DEL ARCHIVO", r"VALORES FALTANTES", r"ESTAD√çSTICAS DESCRIPTIVAS",
        r"FRECUENCIAS CATEG√ìRICAS", r"OBSERVACIONES Y RECOMENDACIONES",
        r"Total de valores faltantes", r"Nombre del archivo", r"N√∫mero de filas",
        r"N√∫mero de columnas", r"Fecha de an√°lisis", r"Columna", r"Media",
        r"Mediana", r"Desv\. Est\.", r"M√≠n", r"M√°x", r"Valor", r"Frecuencia",
        r"Porcentaje"
    ]
    
    # Verificar secciones
    for section in sections:
        if section in text:
            results['sections_found'].append(section)
        else:
            results['sections_missing'].append(section)
    
    # Buscar textos en ingl√©s
    for pattern in english_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if matches:
            results['english_texts'].update(matches)
    
    # Buscar textos en espa√±ol
    for pattern in spanish_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if matches:
            results['spanish_texts'].update(matches)
    
    # Evaluar calidad de la traducci√≥n
    if results['english_texts'] and results['spanish_texts']:
        results['translation_quality'] = 'Mixta (contiene textos en ingl√©s y espa√±ol)'
    elif results['english_texts'] and not results['spanish_texts']:
        results['translation_quality'] = 'Solo ingl√©s (sin traducci√≥n)'
    elif not results['english_texts'] and results['spanish_texts']:
        results['translation_quality'] = 'Completa (solo espa√±ol)'
    
    return results

def main():
    st.set_page_config(
        page_title="Analizador de Traducciones PDF",
        page_icon="üìÑ",
        layout="wide"
    )
    
    st.title("üìÑ Analizador de Traducciones PDF")
    st.markdown("""
    Sube un archivo PDF para analizar la calidad de las traducciones entre ingl√©s y espa√±ol.
    """)
    
    uploaded_file = st.file_uploader("Sube tu archivo PDF", type="pdf")
    
    if uploaded_file is not None:
        with st.spinner('Analizando el documento...'):
            text = extract_pdf_text(uploaded_file)
            if text:
                results = analyze_translations(text)
                
                # Mostrar resultados
                st.header("üìä Resultados del An√°lisis")
                
                # Calidad de la traducci√≥n
                st.markdown("""
                ### Calidad de la Traducci√≥n
                <div style='padding: 10px; border-radius: 5px; background-color: #f0f2f6; margin: 10px 0;'>
                    <span style='font-weight: bold;'>{}</span>
                </div>
                """.format(results['translation_quality']), unsafe_allow_html=True)
                
                # Secciones encontradas
                with st.expander("üìë Secciones del Documento", expanded=True):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("‚úÖ Secciones Encontradas")
                        for section in results['sections_found']:
                            st.success(f"‚úì {section}")
                    with col2:
                        if results['sections_missing']:
                            st.subheader("‚ùå Secciones Faltantes")
                            for section in results['sections_missing']:
                                st.error(f"‚úó {section}")
                
                # Textos en ingl√©s
                if results['english_texts']:
                    with st.expander("üîç Textos en Ingl√©s Encontrados", expanded=False):
                        st.warning("Se encontraron los siguientes textos en ingl√©s:")
                        for text in sorted(results['english_texts']):
                            st.write(f"- {text}")
                
                # Textos en espa√±ol
                if results['spanish_texts']:
                    with st.expander("üîç Textos en Espa√±ol Encontrados", expanded=False):
                        st.success("Se encontraron los siguientes textos en espa√±ol:")
                        for text in sorted(results['spanish_texts']):
                            st.write(f"- {text}")
                
                # Vista previa del texto
                with st.expander("üìÑ Vista Previa del Texto", expanded=False):
                    st.text_area("Primeras 500 caracteres del documento:", 
                               value=text[:500] + ("..." if len(text) > 500 else ""),
                               height=200)

if __name__ == "__main__":
    main()
